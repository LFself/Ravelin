{"name":"Ravelin","tagline":"Robotics Matrix Vector Linear Algebra library","body":"![Ravelin](https://camo.githubusercontent.com/f9db64acc89e492a5425de8bb20adffd04f2b6bf/687474703a2f2f7777772e6b756b2d776568726d616368742e64652f67656665636874652f696d672f6c616e646175322e6a7067)\r\n\r\n## Documentation\r\n[Installation instructions](https://github.com/PositronicsLab/Ravelin/wiki/Installation-instructions)\r\n\r\n[Wiki documentation](https://github.com/PositronicsLab/Ravelin/wiki)\r\n\r\n[Doxygen documentation](http://positronicslab.github.io/Ravelin/doxygen/index.html) \r\n\r\n\r\n## About\r\n**Ravelin** is a library for multi-rigid body kinematics and dynamics. **Ravelin** was spun-off from the [Moby](http://positronicslab.github.io/Moby) simulator and provides the following features:\r\n* Straightforward semantics on memory allocation toward programming for real-time systems\r\n* Rigid body kinematics and dynamics computation, including poses, velocities, accelerations, inertias (both rigid body and articulated body), momenta, and forces\r\n* Currently supports revolute, prismatic, spherical, ball-and-socket, universal, and fixed joints\r\n* Bodies can have \"floating\" bases and kinematic loops\r\n* Forward dynamics can be computed in minimal coordinates (using the _Composite Rigid Body_ and _Featherstone's Articulated Body_ algorithms), in absolute coordinates, or using a mixture of the two (useful for bodies with kinematic loops)\r\n* Inverse dynamics can be computed using the Recursive Newton-Euler Algorithm \r\n* _Frame checking_: operations on kinematic and dynamic quantities defined in different frames throw exceptions\r\n\r\n## Matrix/vector arithmetic and linear algebra\r\n**Ravelin**'s matrix/vector arithmetic and linear algebra use very reliable BLAS and LAPACK libraries. The following features are provided:\r\n* Efficient block operations on matrices and vectors (similar to Eigen's segment() and block() functions)\r\n* Minimum templated C++ code for fast compilation\r\n* Iterators, which provides compatibility with STL and Boost algorithms","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}